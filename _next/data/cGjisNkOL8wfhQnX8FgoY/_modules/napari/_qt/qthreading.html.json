{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/release/index.html":{"level":1,"children":["/release/release_0_4_12.html","/release/release_0_4_11.html","/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_13.html","/release/release_0_4_14.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_14.html":{"level":2,"children":[],"href":"/release/release_0_4_14.html","text":"napari 0.4.14"},"/release/release_0_4_13.html":{"level":2,"children":[],"href":"/release/release_0_4_13.html","text":"napari 0.4.13"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_4_12.html":{"level":2,"children":[],"href":"/release/release_0_4_12.html","text":"napari 0.4.12"},"/glossary.html":{"level":1,"children":[],"href":"/glossary.html","text":"Glossary"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html","/developers/translations.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/translations.html":{"level":2,"children":[],"href":"/developers/translations.html","text":"Translations"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html","/api/stable/napari.plugins.PackageMetadata.html","/api/stable/napari.plugins.Path.html","/api/stable/napari.plugins.PluginManifest.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.PluginManifest.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.PluginManifest.html","text":"napari.plugins.PluginManifest"},"/api/stable/napari.plugins.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.Path.html","text":"napari.plugins.Path"},"/api/stable/napari.plugins.PackageMetadata.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.PackageMetadata.html","text":"napari.plugins.PackageMetadata"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html","/api/stable/napari.utils.progress.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.progress.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.progress.html","text":"napari.utils.progress"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html","/api/stable/napari.types.partial.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.partial.html":{"level":3,"children":[],"href":"/api/stable/napari.types.partial.html","text":"napari.types.partial"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Dims.html","/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.view_layers.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Dims.html","text":"napari.view_layers.Dims"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html","/community/working_groups.html","/community/meeting_schedule.html"],"href":"/community/index.html","text":"Community"},"/community/meeting_schedule.html":{"level":2,"children":[],"href":"/community/meeting_schedule.html","text":"Meeting schedule"},"/community/working_groups.html":{"level":2,"children":[],"href":"/community/working_groups.html","text":"Working groups"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the project and team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/first_plugin.html","/plugins/stable/manifest.html","/plugins/stable/contributions.html","/plugins/stable/guides.html","/plugins/stable/test_deploy.html","/plugins/stable/best_practices.html","/plugins/stable/npe2_migration_guide.html","/plugins/stable/npe1.html","/plugins/stable/find_and_install_plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find_and_install_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find_and_install_plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/npe1.html":{"level":2,"children":[],"href":"/plugins/stable/npe1.html","text":"1st Gen Plugin Guide (Deprecated)"},"/plugins/stable/npe2_migration_guide.html":{"level":2,"children":[],"href":"/plugins/stable/npe2_migration_guide.html","text":"npe2 migration guide"},"/plugins/stable/best_practices.html":{"level":2,"children":[],"href":"/plugins/stable/best_practices.html","text":"Best practices"},"/plugins/stable/test_deploy.html":{"level":2,"children":[],"href":"/plugins/stable/test_deploy.html","text":"Test and Deploy"},"/plugins/stable/guides.html":{"level":2,"children":[],"href":"/plugins/stable/guides.html","text":"Contribution Guides"},"/plugins/stable/contributions.html":{"level":2,"children":[],"href":"/plugins/stable/contributions.html","text":"Contributions Reference"},"/plugins/stable/manifest.html":{"level":2,"children":[],"href":"/plugins/stable/manifest.html","text":"Manifest Reference"},"/plugins/stable/first_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/first_plugin.html","text":"Your First Plugin"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/magicgui.html","/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/rendering-explanation.html","/guides/stable/rendering.html","/guides/stable/performance.html","/guides/stable/3D_interactivity.html","/guides/stable/events_reference.html","/guides/stable/contexts_expressions.html","/guides/stable/preferences.html"],"href":"/guides/stable/index.html","text":"In-depth explanations"},"/guides/stable/preferences.html":{"level":2,"children":[],"href":"/guides/stable/preferences.html","text":"Preferences"},"/guides/stable/contexts_expressions.html":{"level":2,"children":[],"href":"/guides/stable/contexts_expressions.html","text":"Contexts and Expressions in napari"},"/guides/stable/events_reference.html":{"level":2,"children":[],"href":"/guides/stable/events_reference.html","text":"Events reference"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"napari performance"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous rendering"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An introduction to the event loop in napari"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/howtos/index.html":{"level":1,"children":["/howtos/connecting_events.html","/howtos/napari_imageJ.html","/howtos/docker.html","/howtos/perfmon.html"],"href":"/howtos/index.html","text":"How-to guides"},"/howtos/perfmon.html":{"level":2,"children":[],"href":"/howtos/perfmon.html","text":"Performance monitoring"},"/howtos/docker.html":{"level":2,"children":[],"href":"/howtos/docker.html","text":"Napari in Docker"},"/howtos/napari_imageJ.html":{"level":2,"children":[],"href":"/howtos/napari_imageJ.html","text":"napari + ImageJ how-to guide"},"/howtos/connecting_events.html":{"level":2,"children":[],"href":"/howtos/connecting_events.html","text":"Hooking up your own events"},"/tutorials/index.html":{"level":1,"children":["/tutorials/segmentation/index.html","/tutorials/tracking/index.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/further-resources/napari-workshops.html","/tutorials/tracking/cell_tracking.html","/tutorials/segmentation/annotate_segmentation.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/segmentation/annotate_segmentation.html":{"level":2,"children":[],"href":"/tutorials/segmentation/annotate_segmentation.html","text":"Annotating segmentation with text and bounding boxes"},"/tutorials/tracking/cell_tracking.html":{"level":2,"children":[],"href":"/tutorials/tracking/cell_tracking.html","text":"Single cell tracking with napari"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/dask.html":{"level":2,"children":[],"href":"/tutorials/applications/dask.html","text":"Using Dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":2,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"Annotating videos with napari"},"/tutorials/tracking/index.html":{"level":2,"children":[],"href":"/tutorials/tracking/index.html","text":"Tracking"},"/tutorials/segmentation/index.html":{"level":2,"children":[],"href":"/tutorials/segmentation/index.html","text":"Segmentation"},"/tutorials/start_index.html":{"level":1,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/start_index.html","text":"Getting Started"},"/tutorials/fundamentals/vectors.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"Getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"How to install napari on your machine"}},"rootGlobalHeaders":["/tutorials/start_index.html","/tutorials/index.html","/howtos/index.html","/guides/stable/index.html","/plugins/stable/index.html","/community/index.html","/api/stable/index.html","/developers/index.html","/glossary.html","/release/index.html","/roadmaps/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari._qt.qthreading","pageFrontMatter":{},"previewImage":"","previewDescription":"","appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"children":"const THEBE_JS_URL = \"https://unpkg.com/thebe@0.8.2/lib/index.js\"\nconst thebe_selector = \".thebe,.cell\"\nconst thebe_selector_input = \"pre\"\nconst thebe_selector_output = \".output, .cell_output\"\n"},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionType</span><span class=\"p\">,</span> <span class=\"n\">GeneratorType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">List</span><span class=\"p\">,</span>\n    <span class=\"n\">Optional</span><span class=\"p\">,</span>\n    <span class=\"n\">Sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">Type</span><span class=\"p\">,</span>\n    <span class=\"n\">TypeVar</span><span class=\"p\">,</span>\n    <span class=\"n\">Union</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">superqt.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_qthreading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">ParamSpec</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.progress</span> <span class=\"kn\">import</span> <span class=\"n\">progress</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n\n<span class=\"n\">wait_for_workers_to_quit</span> <span class=\"o\">=</span> <span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">WorkerBase</span><span class=\"o\">.</span><span class=\"n\">await_workers</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_NotifyingMixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">WorkerBase</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>  <span class=\"c1\"># type: ignore</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errored</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relay_error</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">warned</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relay_warning</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_relay_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..utils.notifications</span> <span class=\"kn\">import</span> <span class=\"n\">notification_manager</span>\n\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">receive_error</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">__traceback__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_relay_warning</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">show_warn_args</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..utils.notifications</span> <span class=\"kn\">import</span> <span class=\"n\">notification_manager</span>\n\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">receive_warning</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">show_warn_args</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_Y</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_Y\"</span><span class=\"p\">)</span>\n<span class=\"n\">_S</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_S\"</span><span class=\"p\">)</span>\n<span class=\"n\">_R</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_R\"</span><span class=\"p\">)</span>\n<span class=\"n\">_P</span> <span class=\"o\">=</span> <span class=\"n\">ParamSpec</span><span class=\"p\">(</span><span class=\"s2\">\"_P\"</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"FunctionWorker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.FunctionWorker.html#napari.qt.threading.FunctionWorker\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FunctionWorker</span><span class=\"p\">(</span><span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">FunctionWorker</span><span class=\"p\">[</span><span class=\"n\">_R</span><span class=\"p\">],</span> <span class=\"n\">_NotifyingMixin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span></div>\n\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GeneratorWorker</span><span class=\"p\">(</span>\n    <span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">GeneratorWorker</span><span class=\"p\">[</span><span class=\"n\">_Y</span><span class=\"p\">,</span> <span class=\"n\">_S</span><span class=\"p\">,</span> <span class=\"n\">_R</span><span class=\"p\">],</span> <span class=\"n\">_NotifyingMixin</span>\n<span class=\"p\">):</span>\n    <span class=\"o\">...</span></div>\n\n\n<span class=\"c1\"># these are re-implemented from superqt just to provide progress</span>\n\n\n<div class=\"viewcode-block\" id=\"create_worker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.html#napari.qt.threading.create_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_worker</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">FunctionType</span><span class=\"p\">,</span> <span class=\"n\">GeneratorType</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"n\">_start_thread</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_connect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_progress</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_worker_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">GeneratorWorker</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">FunctionWorker</span><span class=\"p\">],</span> <span class=\"kc\">None</span>\n    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_ignore_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">FunctionWorker</span><span class=\"p\">,</span> <span class=\"n\">GeneratorWorker</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Convenience function to start a function in another thread.</span>\n\n<span class=\"sd\">    By default, uses :class:`Worker`, but a custom ``WorkerBase`` subclass may</span>\n<span class=\"sd\">    be provided.  If so, it must be a subclass of :class:`Worker`, which</span>\n<span class=\"sd\">    defines a standard set of signals and a run method.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    func : Callable</span>\n<span class=\"sd\">        The function to call in another thread.</span>\n<span class=\"sd\">    _start_thread : bool, optional</span>\n<span class=\"sd\">        Whether to immediaetly start the thread.  If False, the returned worker</span>\n<span class=\"sd\">        must be manually started with ``worker.start()``. by default it will be</span>\n<span class=\"sd\">        ``False`` if the ``_connect`` argument is ``None``, otherwise ``True``.</span>\n<span class=\"sd\">    _connect : Dict[str, Union[Callable, Sequence]], optional</span>\n<span class=\"sd\">        A mapping of ``\"signal_name\"`` -&gt; ``callable`` or list of ``callable``:</span>\n<span class=\"sd\">        callback functions to connect to the various signals offered by the</span>\n<span class=\"sd\">        worker class. by default None</span>\n<span class=\"sd\">    _progress : Union[bool, Dict[str, Union[int, bool, str]]], optional</span>\n<span class=\"sd\">        Can be True, to provide indeterminate progress bar, or dictionary.</span>\n<span class=\"sd\">        If dict, requires mapping of 'total' to number of expected yields.</span>\n<span class=\"sd\">        If total is not provided, progress bar will be indeterminate. Will connect</span>\n<span class=\"sd\">        progress bar update to yields and display this progress in the viewer.</span>\n<span class=\"sd\">        Can also take a mapping of 'desc' to the progress bar description.</span>\n<span class=\"sd\">        Progress bar will become indeterminate when number of yields exceeds 'total'.</span>\n<span class=\"sd\">        By default None.</span>\n<span class=\"sd\">    _worker_class : Type[WorkerBase], optional</span>\n<span class=\"sd\">        The :class`WorkerBase` to instantiate, by default</span>\n<span class=\"sd\">        :class:`FunctionWorker` will be used if ``func`` is a regular function,</span>\n<span class=\"sd\">        and :class:`GeneratorWorker` will be used if it is a generator.</span>\n<span class=\"sd\">    _ignore_errors : bool, optional</span>\n<span class=\"sd\">        If ``False`` (the default), errors raised in the other thread will be</span>\n<span class=\"sd\">        reraised in the main thread (makes debugging significantly easier).</span>\n<span class=\"sd\">    *args</span>\n<span class=\"sd\">        will be passed to ``func``</span>\n<span class=\"sd\">    **kwargs</span>\n<span class=\"sd\">        will be passed to ``func``</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    worker : WorkerBase</span>\n<span class=\"sd\">        An instantiated worker.  If ``_start_thread`` was ``False``, the worker</span>\n<span class=\"sd\">        will have a `.start()` method that can be used to start the thread.</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If a worker_class is provided that is not a subclass of WorkerBase.</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If _connect is provided and is not a dict of ``{str: callable}``</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If _progress is provided and function is not a generator</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        def long_function(duration):</span>\n<span class=\"sd\">            import time</span>\n<span class=\"sd\">            time.sleep(duration)</span>\n\n<span class=\"sd\">        worker = create_worker(long_function, 10)</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># provide our own classes with the notification mixins</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_worker_class</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isgeneratorfunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"n\">_worker_class</span> <span class=\"o\">=</span> <span class=\"n\">GeneratorWorker</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_worker_class</span> <span class=\"o\">=</span> <span class=\"n\">FunctionWorker</span>\n\n    <span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">create_worker</span><span class=\"p\">(</span>\n        <span class=\"n\">func</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">_start_thread</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">_connect</span><span class=\"o\">=</span><span class=\"n\">_connect</span><span class=\"p\">,</span>\n        <span class=\"n\">_worker_class</span><span class=\"o\">=</span><span class=\"n\">_worker_class</span><span class=\"p\">,</span>\n        <span class=\"n\">_ignore_errors</span><span class=\"o\">=</span><span class=\"n\">_ignore_errors</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># either True or a non-empty dictionary</span>\n    <span class=\"k\">if</span> <span class=\"n\">_progress</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_progress</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"n\">_progress</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'total'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">FunctionWorker</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">total</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"_progress total != 0 but worker is FunctionWorker and will not yield. Returning indeterminate progress bar...\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">pbar</span> <span class=\"o\">=</span> <span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"n\">desc</span><span class=\"p\">)</span>\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">GeneratorWorker</span><span class=\"p\">):</span>\n            <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">increment_with_overflow</span><span class=\"p\">)</span>\n\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">pbar</span> <span class=\"o\">=</span> <span class=\"n\">pbar</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_start_thread</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">_start_thread</span> <span class=\"o\">=</span> <span class=\"n\">_connect</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_start_thread</span><span class=\"p\">:</span>\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">worker</span></div>\n\n\n<div class=\"viewcode-block\" id=\"thread_worker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.html#napari.qt.threading.thread_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">thread_worker</span><span class=\"p\">(</span>\n    <span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">start_thread</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">connect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">worker_class</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">FunctionWorker</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">GeneratorWorker</span><span class=\"p\">],</span> <span class=\"kc\">None</span>\n    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ignore_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Decorator that runs a function in a separate thread when called.</span>\n\n<span class=\"sd\">    When called, the decorated function returns a :class:`WorkerBase`.  See</span>\n<span class=\"sd\">    :func:`create_worker` for additional keyword arguments that can be used</span>\n<span class=\"sd\">    when calling the function.</span>\n\n<span class=\"sd\">    The returned worker will have these signals:</span>\n\n<span class=\"sd\">        - *started*: emitted when the work is started</span>\n<span class=\"sd\">        - *finished*: emitted when the work is finished</span>\n<span class=\"sd\">        - *returned*: emitted with return value</span>\n<span class=\"sd\">        - *errored*: emitted with error object on Exception</span>\n\n<span class=\"sd\">    It will also have a ``worker.start()`` method that can be used to start</span>\n<span class=\"sd\">    execution of the function in another thread. (useful if you need to connect</span>\n<span class=\"sd\">    callbacks to signals prior to execution)</span>\n\n<span class=\"sd\">    If the decorated function is a generator, the returned worker will also</span>\n<span class=\"sd\">    provide these signals:</span>\n\n<span class=\"sd\">        - *yielded*: emitted with yielded values</span>\n<span class=\"sd\">        - *paused*: emitted when a running job has successfully paused</span>\n<span class=\"sd\">        - *resumed*: emitted when a paused job has successfully resumed</span>\n<span class=\"sd\">        - *aborted*: emitted when a running job is successfully aborted</span>\n\n<span class=\"sd\">    And these methods:</span>\n\n<span class=\"sd\">        - *quit*: ask the thread to quit</span>\n<span class=\"sd\">        - *toggle_paused*: toggle the running state of the thread.</span>\n<span class=\"sd\">        - *send*: send a value into the generator.  (This requires that your</span>\n<span class=\"sd\">          decorator function uses the ``value = yield`` syntax)</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    function : callable</span>\n<span class=\"sd\">        Function to call in another thread.  For communication between threads</span>\n<span class=\"sd\">        may be a generator function.</span>\n<span class=\"sd\">    start_thread : bool, optional</span>\n<span class=\"sd\">        Whether to immediaetly start the thread.  If False, the returned worker</span>\n<span class=\"sd\">        must be manually started with ``worker.start()``. by default it will be</span>\n<span class=\"sd\">        ``False`` if the ``_connect`` argument is ``None``, otherwise ``True``.</span>\n<span class=\"sd\">    connect : Dict[str, Union[Callable, Sequence]], optional</span>\n<span class=\"sd\">        A mapping of ``\"signal_name\"`` -&gt; ``callable`` or list of ``callable``:</span>\n<span class=\"sd\">        callback functions to connect to the various signals offered by the</span>\n<span class=\"sd\">        worker class. by default None</span>\n<span class=\"sd\">    progress : Union[bool, Dict[str, Union[int, bool, str]]], optional</span>\n<span class=\"sd\">        Can be True, to provide indeterminate progress bar, or dictionary.</span>\n<span class=\"sd\">        If dict, requires mapping of 'total' to number of expected yields.</span>\n<span class=\"sd\">        If total is not provided, progress bar will be indeterminate. Will connect</span>\n<span class=\"sd\">        progress bar update to yields and display this progress in the viewer.</span>\n<span class=\"sd\">        Can also take a mapping of 'desc' to the progress bar description.</span>\n<span class=\"sd\">        Progress bar will become indeterminate when number of yields exceeds 'total'.</span>\n<span class=\"sd\">        By default None. Must be used in conjunction with a generator function.</span>\n<span class=\"sd\">    worker_class : Type[WorkerBase], optional</span>\n<span class=\"sd\">        The :class`WorkerBase` to instantiate, by default</span>\n<span class=\"sd\">        :class:`FunctionWorker` will be used if ``func`` is a regular function,</span>\n<span class=\"sd\">        and :class:`GeneratorWorker` will be used if it is a generator.</span>\n<span class=\"sd\">    ignore_errors : bool, optional</span>\n<span class=\"sd\">        If ``False`` (the default), errors raised in the other thread will be</span>\n<span class=\"sd\">        reraised in the main thread (makes debugging significantly easier).</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    callable</span>\n<span class=\"sd\">        function that creates a worker, puts it in a new thread and returns</span>\n<span class=\"sd\">        the worker instance.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        @thread_worker</span>\n<span class=\"sd\">        def long_function(start, end):</span>\n<span class=\"sd\">            # do work, periodically yielding</span>\n<span class=\"sd\">            i = start</span>\n<span class=\"sd\">            while i &lt;= end:</span>\n<span class=\"sd\">                time.sleep(0.1)</span>\n<span class=\"sd\">                yield i</span>\n\n<span class=\"sd\">            # do teardown</span>\n<span class=\"sd\">            return 'anything'</span>\n\n<span class=\"sd\">        # call the function to start running in another thread.</span>\n<span class=\"sd\">        worker = long_function()</span>\n<span class=\"sd\">        # connect signals here if desired... or they may be added using the</span>\n<span class=\"sd\">        # `connect` argument in the `@thread_worker` decorator... in which</span>\n<span class=\"sd\">        # case the worker will start immediately when long_function() is called</span>\n<span class=\"sd\">        worker.start()</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_inner</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">worker_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"c1\"># decorator kwargs can be overridden at call time by using the</span>\n            <span class=\"c1\"># underscore-prefixed version of the kwarg.</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_start_thread'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_start_thread'</span><span class=\"p\">,</span> <span class=\"n\">start_thread</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_connect'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_connect'</span><span class=\"p\">,</span> <span class=\"n\">connect</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_progress'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_progress'</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_worker_class'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_worker_class'</span><span class=\"p\">,</span> <span class=\"n\">worker_class</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_ignore_errors'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"s1\">'_ignore_errors'</span><span class=\"p\">,</span> <span class=\"n\">ignore_errors</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">create_worker</span><span class=\"p\">(</span>\n                <span class=\"n\">func</span><span class=\"p\">,</span>\n                <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">worker_function</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_inner</span> <span class=\"k\">if</span> <span class=\"n\">function</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">_inner</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">)</span></div>\n\n\n<span class=\"n\">_new_worker_qthread</span> <span class=\"o\">=</span> <span class=\"n\">_qthreading</span><span class=\"o\">.</span><span class=\"n\">new_worker_qthread</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_register</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">magicgui</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">..</span> <span class=\"kn\">import</span> <span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"n\">types</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">..types</span> <span class=\"kn\">import</span> <span class=\"n\">LayerDataTuple</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">..utils</span> <span class=\"kn\">import</span> <span class=\"n\">_magicgui</span> <span class=\"k\">as</span> <span class=\"n\">_mgui</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_type</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">LayerDataTuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">LayerDataTuple</span><span class=\"p\">]):</span>\n        <span class=\"n\">magicgui</span><span class=\"o\">.</span><span class=\"n\">register_type</span><span class=\"p\">(</span>\n            <span class=\"n\">FunctionWorker</span><span class=\"p\">[</span><span class=\"n\">_type</span><span class=\"p\">],</span> <span class=\"n\">return_callback</span><span class=\"o\">=</span><span class=\"n\">_mgui</span><span class=\"o\">.</span><span class=\"n\">add_worker_data</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">layer_name</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">:</span>\n        <span class=\"n\">_type</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">layer_name</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s1\">Data'</span><span class=\"p\">)</span>\n        <span class=\"n\">magicgui</span><span class=\"o\">.</span><span class=\"n\">register_type</span><span class=\"p\">(</span>\n            <span class=\"n\">FunctionWorker</span><span class=\"p\">[</span><span class=\"n\">_type</span><span class=\"p\">],</span>\n            <span class=\"n\">return_callback</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">_mgui</span><span class=\"o\">.</span><span class=\"n\">add_worker_data</span><span class=\"p\">,</span> <span class=\"n\">_from_tuple</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"n\">_register</span><span class=\"p\">()</span>\n</pre></div>\n      ","pageHeaders":[],"ipynbSource":"","mdSource":""}},"__N_SSG":true}